@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

enum Card << enumeration >> {
  + Card(): 
  + Gatto: 
  + Libro: 
  + Trofeo: 
  + Pianta: 
  + Gioco: 
  + Cornice: 
  + valueOf(String): Card
  + values(): Card[]
}
class CardsDeck {
  + CardsDeck(): 
  + CARDS_PER_TYPE: int
  + TOTAL_CARDS: int
  - cards: Stack<Card>
  + size(): int
  + draw(): Optional<Card>
}
entity Cell << record >> {
  + Cell(int, int, Card): 
  - card: Card
  - y: int
  - x: int
  + y(): int
  + card(): Card
  + x(): int
}
entity Cockade << record >> {
  + Cockade(String, int): 
  - points: int
  - name: String
  + name(): String
  + points(): int
}
class CommonObjective {
  + CommonObjective(String, int, Function<Shelf, Boolean>): 
  ~ name: String
  ~ value: int
  - INITIAL_VALUE: int
  ~ checkCompleted: Function<Shelf, Boolean>
  ~ pointDecrement: int
  - POINT_DECREMENT_2_PLAYERS: int
  - POINT_DECREMENT: int
  + isCompleted(Shelf): Optional<Cockade>
}
class Game {
  + Game(): 
  - players: ArrayList<Player>
  - tabletop: TableTop
  - commonObjectives: CommonObjective[]
  + getTabletop(): TableTop
  + getCommonObjectives(): CommonObjective[]
  + getPlayers(): ArrayList<Player>
}
class InvalidMoveException {
  + InvalidMoveException(String): 
}
class Objective {
  + Objective(String): 
  # name: String
  + isCompleted(Shelf): Optional<Cockade>
  + getName(): String
  + equals(Object): boolean
}
class PersonalObjective {
  + PersonalObjective(String, Cell[]): 
  - points: int[]
  - cellsCheck: Cell[]
  + isCompleted(Shelf): Optional<Cockade>
}
class Player {
  + Player(String, PersonalObjective): 
  - name: String
  - shelf: Shelf
  - personalObjective: PersonalObjective
  - trophies: ArrayList<Cockade>
  + getTrophies(): ArrayList<Cockade>
  + getName(): String
  + getShelf(): Shelf
  + getPersonalObjective(): PersonalObjective
}
class Shelf {
  + Shelf(): 
  - dy: int[]
  - slots: Optional<Card>[][]
  - dx: int[]
  - groupPoints: int[]
  + COLUMNS: int
  + ROWS: int
  + insert(int, Card[]): void
  - getHighest(int): int
  + getCard(int, int): Optional<Card>
  + getGroupsCockades(): ArrayList<Cockade>
  - getGroupSize(int, int, Card, boolean[][]): int
}
class TableTop {
  + TableTop(int): 
  - table: Optional<Card>[][]
  - dy: int[]
  + MAX_PLAYERS: int
  - deck: CardsDeck
  + player_number_mask: int[][]
  + SIZE: int
  - dx: int[]
  - player_count: int
  + getCard(int, int): Optional<Card>
  + fillTable(): void
  + needRefill(): boolean
  - isUsed(int, int): boolean
  + pickCard(int, int): Card
  + getDeck(): CardsDeck
  + isPickable(int, int): boolean
}

CommonObjective       -[#000082,plain]-^  Objective            
Game                 "1" *-[#595959,plain]-> "commonObjectives\n*" CommonObjective      
Game                 "1" *-[#595959,plain]-> "players\n*" Player               
Game                 "1" *-[#595959,plain]-> "tabletop\n1" TableTop             
PersonalObjective    "1" *-[#595959,plain]-> "cellsCheck\n*" Cell                 
PersonalObjective     -[#000082,plain]-^  Objective            
Player               "1" *-[#595959,plain]-> "trophies\n*" Cockade              
Player               "1" *-[#595959,plain]-> "personalObjective\n1" PersonalObjective    
Player               "1" *-[#595959,plain]-> "shelf\n1" Shelf                
TableTop             "1" *-[#595959,plain]-> "deck\n1" CardsDeck            
@enduml
